apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mysql-pvc
  namespace: {{ .Values.NS_PREFIX }}-system
spec:
  accessModes:
    - ReadWriteOnce
  storageClassName: {{ .Values.SYSTEM_SC_NAME }}
  resources:
    requests:
      storage: 1Gi

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: twgc-database
  namespace: {{ .Values.NS_PREFIX }}-system
spec:
  selector:
    matchLabels:
      tier: mysql
  replicas: 1
  template:
    metadata:
      name: mysql-pod
      labels:
        tier: mysql
    spec:
      containers:
      - name: twgc-database
        image: "{{ .Values.DB_IMG }}:{{ include "VERSION" . }}"
        ports:
          - containerPort: 3306
        env:
        - name: MYSQL_ROOT_PASSWORD
          value: {{ .Values.DB_ROOT_PW }}
        volumeMounts:
        - name: mysql-storage
          mountPath: /var/lib/mysql
        - name: twgc-database-init
          mountPath: /docker-entrypoint-initdb.d
      volumes:
      - name: mysql-storage
        persistentVolumeClaim:
          claimName: mysql-pvc
      - name: twgc-database-init
        configMap:
          name: twgc-database-cm
          items:
          - key: database-init
            path: init.sql
      imagePullSecrets:
        - name: regcred

---

apiVersion: v1
kind: Service
metadata:
  name: twgc-database-svc
  namespace: {{ .Values.NS_PREFIX }}-system
spec:
  ports:
    - port: 3306
  selector:
    tier: mysql

---

apiVersion: v1
kind: ConfigMap
metadata:
  name: twgc-database-cm
  namespace: {{ .Values.NS_PREFIX }}-system
data:
  database-init: |-
    CREATE DATABASE twgc;
    CREATE USER 'twgc'@'localhost' IDENTIFIED BY 'twgc@NCHC';
    CREATE USER 'twgc'@'%' IDENTIFIED BY 'twgc@NCHC';
    GRANT ALL ON twgc.* TO 'twgc'@'localhost';
    GRANT ALL ON twgc.* TO 'twgc'@'%';

---

apiVersion: v1
kind: ConfigMap
metadata:
  name: twgc-api-cm
  namespace: {{ .Values.NS_PREFIX }}-system
data:
  api-conf: |-
    {
      "api-server": {
        "isOutsideCluster": false,
        "port": 38080,
        "enableSecureAPI": true,
        "namespacePrefix": "{{ .Values.NS_PREFIX }}",
        "uidRange": "{{ include "UID_RANGE" . }}",
        "provider": {
          "type": "go-oauth",
          "name": "test-provider",
          "client_id": "test_client_1",
          "client_secret": "test_secret",
          "url": "http://oauth-server-svc.{{ .Values.NS_PREFIX }}-system:8080",
          "redirect_url": "https://{{ include "UI_URL" . }}/user/classroom-manage"
        }
      },
      "database": {
        "host": "twgc-database-svc.{{ .Values.NS_PREFIX }}-system",
        "port": 3306,
        "username": "twgc",
        "password": "twgc@NCHC",
        "database": "twgc"
      },
      "kubernetes": {
        "kubeconfig": "/etc/api-server/openstack-kubeconfig",
        "nodeportDNS": "http://{{ include "NODEPORT_URL" . }}",
        "storageclass": "{{ .Values.COURSE_SC_NAME }}"
      },
      "rfstack": {
        "enable": {{ .Values.common.enable_vm }},
        "url": "http://rfstack-svc.{{ .Values.NS_PREFIX }}-system:8088"
      },
      "redis": {
        "host": "twgc-redis-svc.{{ .Values.NS_PREFIX }}-system",
        "port": 6379
      }
    }
  api-conf-google: |-
    {
      "api-server": {
        "isOutsideCluster": false,
        "port": 38080,
        "enableSecureAPI": true,
        "namespacePrefix": "{{ .Values.NS_PREFIX }}",
        "uidRange": "{{ include "UID_RANGE" . }}",
        "provider": {
          "type": "google-oauth",
          "name": "google-provider",
          "client_id": "294126750314-kilf7lm39n919kj1gss11nj1pph58iu2.apps.googleusercontent.com",
          "client_secret": "mMw1-3oTIUyrGxyPPuDDoNOF",
          "url": "http://oauth-server-svc.{{ .Values.NS_PREFIX }}-system:8080",
          "redirect_url": "https://{{ include "UI_URL" . }}/user/classroom-manage"
        }
      },
      "database": {
        "host": "twgc-database-svc.{{ .Values.NS_PREFIX }}-system",
        "port": 3306,
        "username": "twgc",
        "password": "twgc@NCHC",
        "database": "twgc"
      },
      "kubernetes": {
        "kubeconfig": "/etc/api-server/openstack-kubeconfig",
        "nodeportDNS": "http://{{ include "NODEPORT_URL" . }}",
        "storageclass": "{{ .Values.COURSE_SC_NAME }}"
      },
      "rfstack": {
        "enable": {{ .Values.common.enable_vm }},
        "url": "http://rfstack-svc.{{ .Values.NS_PREFIX }}-system:8088"
      },
      "redis": {
        "host": "twgc-redis-svc.{{ .Values.NS_PREFIX }}-system",
        "port": 6379
      }
    }
  api-conf-github: |-
    {
      "api-server": {
        "isOutsideCluster": false,
        "port": 38080,
        "enableSecureAPI": true,
        "namespacePrefix": "{{ .Values.NS_PREFIX }}",
        "uidRange": "{{ include "UID_RANGE" . }}",
        "provider": {
          "type": "github-oauth",
          "name": "github-provider",
          "client_id": "8c7e2529d37a0855c8bc",
          "client_secret": "4dbe46e60428ac3b6918379ef2023082261c831d",
          "url": "http://oauth-server-svc.{{ .Values.NS_PREFIX }}-system:8080",
          "redirect_url": "https://{{ include "UI_URL" . }}/user/classroom-manage"
        }
      },
      "database": {
        "host": "twgc-database-svc.{{ .Values.NS_PREFIX }}-system",
        "port": 3306,
        "username": "twgc",
        "password": "twgc@NCHC",
        "database": "twgc"
      },
      "kubernetes": {
        "kubeconfig": "/etc/api-server/openstack-kubeconfig",
        "nodeportDNS": "http://{{ include "NODEPORT_URL" . }}",
        "storageclass": "{{ .Values.COURSE_SC_NAME }}"
      },
      "rfstack": {
        "enable": {{ .Values.common.enable_vm }},
        "url": "http://rfstack-svc.{{ .Values.NS_PREFIX }}-system:8088"
      },
      "redis": {
        "host": "twgc-redis-svc.{{ .Values.NS_PREFIX }}-system",
        "port": 6379
      }
    }

---

apiVersion: v1
kind: ServiceAccount
metadata:
  name: twgc-api-server
  namespace: {{ .Values.NS_PREFIX }}-system

---

kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: {{ .Values.NS_PREFIX }}-system-course-namespace-clusterrole
rules:
- apiGroups: ["nchc.ai"]
  resources: ["courses"]
  verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]
- apiGroups: [""]
  resources: ["namespaces", "persistentvolumes", "persistentvolumeclaims","nodes"]
  verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]
- apiGroups: ["rbac.authorization.k8s.io"]
  resources: ["roles", "rolebindings"]
  verbs: ["create"]
- apiGroups: ["security.openshift.io"]
  resourceNames: ["anyuid", "hostmount-anyuid"]
  resources: ["securitycontextconstraints"]
  verbs: ["use"]

---

apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: {{ .Values.NS_PREFIX }}-system-twgc-api-rolebinding-2
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: {{ .Values.NS_PREFIX }}-system-course-namespace-clusterrole
subjects:
- kind: ServiceAccount
  namespace: {{ .Values.NS_PREFIX }}-system
  name: twgc-api-server

---

apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: {{ .ValuesNS_PREFIX }}-system-twgc-api-rolebinding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: edit
subjects:
- kind: ServiceAccount
  namespace: {{ .Values.NS_PREFIX }}-system
  name: twgc-api-server

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: twgc-api
  namespace: {{ .Values.NS_PREFIX }}-system
spec:
  selector:
    matchLabels:
      tier: api-server
  replicas: 1
  template:
    metadata:
      name: api-server
      labels:
        tier: api-server
    spec:
      serviceAccountName: twgc-api-server
      initContainers:
        - name: wait-for-mysql
          image: "{{ .Values.DB_IMG }}:{{ include "VERSION" . }}"
          command:
            - sh
            - -ec
            - |
              until mysql -h twgc-database-svc -u root -p{{ .Values.DB_ROOT_PW }}  --execute "SHOW DATABASES;"  > /dev/null 2>&1; do
                  if [ $? -ne 0 ]; then
                      echo "wait for DB ready"
                      sleep 5
                  fi
              done
          resources:
            requests:
              cpu: 25m
              memory: 32Mi
            limits:
              cpu: 50m
              memory: 64Mi      
      containers:
      - name: twgc-api
        image: "{{ .Values.API_IMG }}:{{ include "API_IMG_VER" . }}"
        imagePullPolicy: Always
        command: ['sh', '-c']
        args:
        - ln -s /etc/ssl/certs/nchc/chain.cert /etc/ssl/certs/chain.cert;
          /app --logtostderr=true --conf=/etc/api-server/{{ .Values.OAUTH_CONF_FILE }}
        ports:
        - containerPort: 38080
        volumeMounts:
        - name: twgc-api-conf
          mountPath: /etc/api-server/
        - name: nchc-cert
          mountPath: /etc/ssl/certs/nchc
      volumes:
      - name: twgc-api-conf
        configMap:
          name: twgc-api-cm
          items:
          - key: api-conf
            path: api-config.json
          - key: api-conf-google
            path: api-config-google.json
          - key: api-conf-github
            path: api-config-github.json
      - name: nchc-cert
        secret:
          secretName: nchc-tls-secret
          items:
          - key: tls.crt
            path: chain.cert
      imagePullSecrets:
      - name: regcred

---

apiVersion: v1
kind: Service
metadata:
  name: twgc-api-svc
  namespace: {{ .Values.NS_PREFIX }}-system
spec:
  ports:
    - port: 38080
  selector:
    tier: api-server

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: twgc-redis-cache
  namespace: {{ .Values.NS_PREFIX }}-system
spec:
  selector:
    matchLabels:
      tier: redis
  replicas: 1
  template:
    metadata:
      name: redis-pod
      labels:
        tier: redis
    spec:
      containers:
      - name: twgc-redis-cache
        image: "{{ .Values.REDIS_IMG }}:{{ include "VERSION" . }}"
        ports:
          - containerPort: 6379
      imagePullSecrets:
        - name: regcred

---

apiVersion: v1
kind: Service
metadata:
  name: twgc-redis-svc
  namespace: {{ .Values.NS_PREFIX }}-system
spec:
  ports:
    - port: 6379
  selector:
    tier: redis
